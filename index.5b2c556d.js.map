{"mappings":"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","sources":["<anon>","src/js/chart.js"],"sourcesContent":["document.getElementById(\"searchForm\").addEventListener(\"submit\", function(event) {\n    event.preventDefault();\n    const city = document.getElementById(\"cityInput\").value;\n    fetchWeather(city);\n});\ndocument.querySelectorAll('input[name=\"unit\"]').forEach((radio)=>{\n    radio.addEventListener(\"change\", function() {\n        const city = document.getElementById(\"cityInput\").value;\n        if (city) fetchWeather(city);\n    });\n});\nfunction getSelectedUnit() {\n    return document.querySelector('input[name=\"unit\"]:checked').value;\n}\nfunction fetchWeather(city) {\n    const unit = getSelectedUnit();\n    const apiKey = \"f1a7f601f87c9d97579ef8237cc83ff1\";\n    const apiUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=${unit}`;\n    fetch(apiUrl).then((response)=>response.json()).then((data)=>{\n        const forecast = data.list.reduce((acc, item)=>{\n            const date = item.dt_txt.split(\" \")[0];\n            if (!acc[date]) acc[date] = [];\n            acc[date].push(item);\n            return acc;\n        }, {});\n        displayForecast(forecast);\n        prepareChartData(forecast);\n    }).catch((error)=>{\n        console.error(\"Error fetching data:\", error);\n    });\n}\nfunction displayForecast(forecast) {\n    const forecastContainer = document.getElementById(\"forecast\");\n    const unit = getSelectedUnit();\n    const unitSymbol = unit === \"metric\" ? \"\\xb0C\" : \"\\xb0F\";\n    forecastContainer.innerHTML = \"\";\n    for(const date in forecast){\n        const dayForecast = forecast[date];\n        const minTemp = Math.min(...dayForecast.map((item)=>item.main.temp_min));\n        const maxTemp = Math.max(...dayForecast.map((item)=>item.main.temp_max));\n        const dayElement = document.createElement(\"div\");\n        dayElement.classList.add(\"day\");\n        const iconUrl = `https://openweathermap.org/img/w/${dayForecast[0].weather[0].icon}.png`;\n        dayElement.innerHTML = `\n            <div>${new Date(dayForecast[0].dt * 1000).toDateString()}</div>\n            <img src=\"${iconUrl}\" alt=\"${dayForecast[0].weather[0].description}\">\n            <div>Min Temp: ${minTemp}${unitSymbol}</div>\n            <div>Max Temp: ${maxTemp}${unitSymbol}</div>\n        `;\n        dayElement.addEventListener(\"click\", function() {\n            displayWeatherInfo(dayForecast);\n        });\n        forecastContainer.appendChild(dayElement);\n    }\n}\nfunction displayWeatherInfo(weatherData) {\n    const weatherInfoContainer = document.getElementById(\"weatherInfo\");\n    const unit = getSelectedUnit();\n    const unitSymbol = unit === \"metric\" ? \"\\xb0C\" : \"\\xb0F\";\n    weatherInfoContainer.innerHTML = \"\";\n    weatherData.forEach((item)=>{\n        const weatherElement = document.createElement(\"div\");\n        const time = new Date(item.dt * 1000).toLocaleTimeString([], {\n            hour: \"2-digit\",\n            minute: \"2-digit\"\n        });\n        const temperature = item.main.temp;\n        const description = item.weather[0].description;\n        const clouds = item.clouds.all;\n        const windSpeed = item.wind.speed;\n        const visibility = item.visibility / 1000; // Convert visibility to kilometers\n        const iconUrl = `https://openweathermap.org/img/w/${item.weather[0].icon}.png`;\n        weatherElement.innerHTML = `\n            <div>${time}</div>\n            <img src=\"${iconUrl}\" alt=\"${description}\">\n            <div>Temperature: ${temperature}${unitSymbol}</div>\n            <div>Description: ${description}</div>\n            <div>Clouds: ${clouds}% <img src=\"cloud-icon.png\" alt=\"Clouds\"></div>\n            <div>Wind Speed: ${windSpeed} m/s <img src=\"wind-icon.png\" alt=\"Wind\"></div>\n            <div>Visibility: ${visibility} km <img src=\"visibility-icon.png\" alt=\"Visibility\"></div>\n        `;\n        weatherInfoContainer.appendChild(weatherElement);\n    });\n    weatherInfoContainer.classList.remove(\"hide\");\n}\nfunction prepareChartData(forecast) {\n    const labels = Object.keys(forecast);\n    const temperatures = [];\n    const humidities = [];\n    const windSpeeds = [];\n    const pressures = [];\n    for(const date in forecast){\n        const dayForecast = forecast[date];\n        const avgTemp = dayForecast.reduce((sum, item)=>sum + item.main.temp, 0) / dayForecast.length;\n        const avgHumidity = dayForecast.reduce((sum, item)=>sum + item.main.humidity, 0) / dayForecast.length;\n        const avgWindSpeed = dayForecast.reduce((sum, item)=>sum + item.wind.speed, 0) / dayForecast.length;\n        const avgPressure = dayForecast.reduce((sum, item)=>sum + item.main.pressure, 0) / dayForecast.length;\n        temperatures.push(avgTemp);\n        humidities.push(avgHumidity);\n        windSpeeds.push(avgWindSpeed);\n        pressures.push(avgPressure);\n    }\n    displayChart(labels, temperatures, humidities, windSpeeds, pressures);\n}\nfunction displayChart(labels, temperatures, humidities, windSpeeds, pressures) {\n    const ctx = document.getElementById(\"weatherChart\").getContext(\"2d\");\n    const chart = new Chart(ctx, {\n        type: \"line\",\n        data: {\n            labels: labels,\n            datasets: [\n                {\n                    label: \"Temperature (\\xb0C)\",\n                    data: temperatures,\n                    borderColor: \"orange\",\n                    fill: false\n                },\n                {\n                    label: \"Humidity (%)\",\n                    data: humidities,\n                    borderColor: \"blue\",\n                    fill: false\n                },\n                {\n                    label: \"Wind Speed (m/s)\",\n                    data: windSpeeds,\n                    borderColor: \"black\",\n                    fill: false\n                },\n                {\n                    label: \"Pressure (hPa)\",\n                    data: pressures,\n                    borderColor: \"green\",\n                    fill: false\n                }\n            ]\n        },\n        options: {\n            responsive: true,\n            scales: {\n                x: {\n                    display: true,\n                    title: {\n                        display: true,\n                        text: \"Date\"\n                    }\n                },\n                y: {\n                    display: true,\n                    title: {\n                        display: true,\n                        text: \"Value\"\n                    }\n                }\n            }\n        }\n    });\n}\ndocument.getElementById(\"showGraphBtn\").addEventListener(\"click\", function() {\n    const chartElement = document.getElementById(\"weatherChart\");\n    chartElement.style.display = \"block\";\n});\n\n//# sourceMappingURL=index.5b2c556d.js.map\n","document.getElementById('searchForm').addEventListener('submit', function(event) {\n    event.preventDefault();\n    const city = document.getElementById('cityInput').value;\n    fetchWeather(city);\n});\n\ndocument.querySelectorAll('input[name=\"unit\"]').forEach(radio => {\n    radio.addEventListener('change', function() {\n        const city = document.getElementById('cityInput').value;\n        if (city) {\n            fetchWeather(city);\n        }\n    });\n});\n\nfunction getSelectedUnit() {\n    return document.querySelector('input[name=\"unit\"]:checked').value;\n}\n\nfunction fetchWeather(city) {\n    const unit = getSelectedUnit();\n    const apiKey = 'f1a7f601f87c9d97579ef8237cc83ff1';\n    const apiUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=${unit}`;\n\n    fetch(apiUrl)\n    .then(response => response.json())\n    .then(data => {\n        const forecast = data.list.reduce((acc, item) => {\n            const date = item.dt_txt.split(' ')[0];\n            if (!acc[date]) {\n                acc[date] = [];\n            }\n            acc[date].push(item);\n            return acc;\n        }, {});\n\n        displayForecast(forecast);\n        prepareChartData(forecast);\n    })\n    .catch(error => {\n        console.error('Error fetching data:', error);\n    });\n}\n\nfunction displayForecast(forecast) {\n    const forecastContainer = document.getElementById('forecast');\n    const unit = getSelectedUnit();\n    const unitSymbol = unit === 'metric' ? '°C' : '°F';\n    forecastContainer.innerHTML = '';\n\n    for (const date in forecast) {\n        const dayForecast = forecast[date];\n        const minTemp = Math.min(...dayForecast.map(item => item.main.temp_min));\n        const maxTemp = Math.max(...dayForecast.map(item => item.main.temp_max));\n        const dayElement = document.createElement('div');\n        dayElement.classList.add('day');\n        const iconUrl = `https://openweathermap.org/img/w/${dayForecast[0].weather[0].icon}.png`;\n        dayElement.innerHTML = `\n            <div>${new Date(dayForecast[0].dt * 1000).toDateString()}</div>\n            <img src=\"${iconUrl}\" alt=\"${dayForecast[0].weather[0].description}\">\n            <div>Min Temp: ${minTemp}${unitSymbol}</div>\n            <div>Max Temp: ${maxTemp}${unitSymbol}</div>\n        `;\n        dayElement.addEventListener('click', function() {\n            displayWeatherInfo(dayForecast);\n        });\n        forecastContainer.appendChild(dayElement);\n    }\n}\n\nfunction displayWeatherInfo(weatherData) {\n    const weatherInfoContainer = document.getElementById('weatherInfo');\n    const unit = getSelectedUnit();\n    const unitSymbol = unit === 'metric' ? '°C' : '°F';\n    weatherInfoContainer.innerHTML = '';\n\n    weatherData.forEach(item => {\n        const weatherElement = document.createElement('div');\n        const time = new Date(item.dt * 1000).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});\n        const temperature = item.main.temp;\n        const description = item.weather[0].description;\n        const clouds = item.clouds.all;\n        const windSpeed = item.wind.speed;\n        const visibility = item.visibility / 1000; // Convert visibility to kilometers\n        const iconUrl = `https://openweathermap.org/img/w/${item.weather[0].icon}.png`;\n\n        weatherElement.innerHTML = `\n            <div>${time}</div>\n            <img src=\"${iconUrl}\" alt=\"${description}\">\n            <div>Temperature: ${temperature}${unitSymbol}</div>\n            <div>Description: ${description}</div>\n            <div>Clouds: ${clouds}% <img src=\"cloud-icon.png\" alt=\"Clouds\"></div>\n            <div>Wind Speed: ${windSpeed} m/s <img src=\"wind-icon.png\" alt=\"Wind\"></div>\n            <div>Visibility: ${visibility} km <img src=\"visibility-icon.png\" alt=\"Visibility\"></div>\n        `;\n        weatherInfoContainer.appendChild(weatherElement);\n    });\n\n    weatherInfoContainer.classList.remove('hide');\n}\n\nfunction prepareChartData(forecast) {\n    const labels = Object.keys(forecast);\n    const temperatures = [];\n    const humidities = [];\n    const windSpeeds = [];\n    const pressures = [];\n\n    for (const date in forecast) {\n        const dayForecast = forecast[date];\n        const avgTemp = dayForecast.reduce((sum, item) => sum + item.main.temp, 0) / dayForecast.length;\n        const avgHumidity = dayForecast.reduce((sum, item) => sum + item.main.humidity, 0) / dayForecast.length;\n        const avgWindSpeed = dayForecast.reduce((sum, item) => sum + item.wind.speed, 0) / dayForecast.length;\n        const avgPressure = dayForecast.reduce((sum, item) => sum + item.main.pressure, 0) / dayForecast.length;\n        \n        temperatures.push(avgTemp);\n        humidities.push(avgHumidity);\n        windSpeeds.push(avgWindSpeed);\n        pressures.push(avgPressure);\n    }\n\n    displayChart(labels, temperatures, humidities, windSpeeds, pressures);\n}\n\nfunction displayChart(labels, temperatures, humidities, windSpeeds, pressures) {\n    const ctx = document.getElementById('weatherChart').getContext('2d');\n    const chart = new Chart(ctx, {\n        type: 'line',\n        data: {\n            labels: labels,\n            datasets: [\n                {\n                    label: 'Temperature (°C)',\n                    data: temperatures,\n                    borderColor: 'orange',\n                    fill: false\n                },\n                {\n                    label: 'Humidity (%)',\n                    data: humidities,\n                    borderColor: 'blue',\n                    fill: false\n                },\n                {\n                    label: 'Wind Speed (m/s)',\n                    data: windSpeeds,\n                    borderColor: 'black',\n                    fill: false\n                },\n                {\n                    label: 'Pressure (hPa)',\n                    data: pressures,\n                    borderColor: 'green',\n                    fill: false\n                }\n            ]\n        },\n        options: {\n            responsive: true,\n            scales: {\n                x: {\n                    display: true,\n                    title: {\n                        display: true,\n                        text: 'Date'\n                    }\n                },\n                y: {\n                    display: true,\n                    title: {\n                        display: true,\n                        text: 'Value'\n                    }\n                }\n            }\n        }\n    });\n}\n\ndocument.getElementById('showGraphBtn').addEventListener('click', function() {\n    const chartElement = document.getElementById('weatherChart');\n    chartElement.style.display = 'block';\n});\n"],"names":["getSelectedUnit","document","querySelector","value","fetchWeather","city","unit","fetch","then","response","json","data","forecast","list","reduce","acc","item","date","dt_txt","split","push","displayForecast","forecastContainer","getElementById","unitSymbol","innerHTML","dayForecast","minTemp","Math","min","map","main","temp_min","maxTemp","max","temp_max","dayElement","createElement","classList","add","iconUrl","weather","icon","Date","dt","toDateString","description","addEventListener","displayWeatherInfo","weatherData","weatherInfoContainer","forEach","weatherElement","time","toLocaleTimeString","hour","minute","temperature","temp","clouds","all","windSpeed","wind","speed","visibility","appendChild","remove","prepareChartData","labels","Object","keys","temperatures","humidities","windSpeeds","pressures","avgTemp","sum","length","avgHumidity","humidity","avgWindSpeed","avgPressure","pressure","Chart","getContext","type","datasets","label","borderColor","fill","options","responsive","scales","x","display","title","text","y","catch","error","console","event","preventDefault","querySelectorAll","radio","chartElement","style"],"version":3,"file":"index.5b2c556d.js.map"}